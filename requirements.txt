import cv2
import face_recognition

def process_video(input_image_path, input_video_path, output_video_path, output_timestamps_path):
    # Step 1: Load the target person's image and encode it
    person_image = face_recognition.load_image_file(input_image_path)
    person_encoding = face_recognition.face_encodings(person_image)[0]

    # Step 2: Load the video
    video_capture = cv2.VideoCapture(input_video_path)

    # Step 3: Prepare the output video writer
    output_video = cv2.VideoWriter(
        output_video_path,
        cv2.VideoWriter_fourcc(*"mp4v"),
        video_capture.get(cv2.CAP_PROP_FPS),
        (int(video_capture.get(cv2.CAP_PROP_FRAME_WIDTH)), int(video_capture.get(cv2.CAP_PROP_FRAME_HEIGHT))),
    )

    # Step 4: Process the video frame by frame
    timestamps = []
    while True:
        ret, frame = video_capture.read()
        if not ret:
            break  # Exit when video ends

        # Convert the frame to RGB for face_recognition
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        # Detect faces and encode them
        face_locations = face_recognition.face_locations(rgb_frame)
        face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)

        for face_encoding, face_location in zip(face_encodings, face_locations):
            # Compare the detected face with the target face
            match = face_recognition.compare_faces([person_encoding], face_encoding, tolerance=0.6)
            if match[0]:  # Match found
                # Get the timestamp (in seconds)
                timestamp = video_capture.get(cv2.CAP_PROP_POS_MSEC) / 1000
                timestamps.append(timestamp)

                # Draw a bounding box around the detected face
                top, right, bottom, left = face_location
                cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)

        # Write the frame to the output video
        output_video.write(frame)

    # Step 5: Save timestamps to a file
    with open(output_timestamps_path, "w") as f:
        for t in timestamps:
            f.write(f"{t:.2f}\n")

    # Release resources
    video_capture.release()
    output_video.release()

    print("Processing completed! Timestamps saved and video processed.")

# Entry point
if __name__ == "__main__":
    # Input paths
    input_image_path = "input/person.jpg"
    input_video_path = "input/video.mp4"

    # Output paths
    output_video_path = "output/processed_video.mp4"
    output_timestamps_path = "output/timestamps.txt"

    # Call the processing function
    process_video(input_image_path, input_video_path, output_video_path, output_timestamps_path)
